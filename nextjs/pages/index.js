import Head from "next/head";
import React, { useCallback, useEffect } from "react";
import styles from "../styles/RandomGenerator.module.css";

const getColor = (rand) => {
  //return rand > 0.5 ? "white" : "black";
  if (rand < 0.33333) {
    return "deeppink";
  }
  if (rand < 0.66666) {
    return "green";
  }
  return "blue";
};

const sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

export default function Home() {
  const [seed, setSeed] = React.useState("default");
  const [size, setSize] = React.useState(40);
  const [renderedSize, setRenderedSize] = React.useState(size);
  const [results, setResults] = React.useState([]);
  const [loading, setLoading] = React.useState(false);

  const getRandom = async (event, seedArg) => {
    setLoading(true);
    if (typeof seedArg === "string") {
      setSeed(seedArg);
    }
    if (event) {
      event.preventDefault();
    }
    const result = await fetch(
      `/api/random-pixels?seed=${seedArg || seed}&limit=${size * size}`
    ).then((res) => res.json());
    setRenderedSize(size);
    setResults(result.results);
    setLoading(false);
    return false;
  };

  const generateApiLoad = async () => {
    for (;;) {
      await getRandom(null, Math.random().toString());
      await sleep(100);
    }
  };

  useEffect(() => {
    getRandom();
  }, []);

  return (
    <div className={styles.container}>
      <Head>
        <title>Random Pixel Art Generator</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>Random Pixel Art Generator</h1>

        <p className={styles.description}>
          Generate a random Pixel Art based on the given seed.
        </p>

        <form className={styles.form} onSubmit={getRandom}>
          <div className={styles.formRow}>
            <label>Seed </label>
            <input
              type="text"
              onChange={(e) => setSeed(e.target.value)}
              value={seed}
              className={styles.input}
            />
          </div>
          <div className={styles.formRow}>
            <label>Size </label>
            <input
              type="number"
              onChange={(e) => setSize(e.target.value)}
              value={size}
              className={styles.input}
            />
          </div>

          <div className={`${styles.formRow} ${styles.submit}`}>
            <button className={styles.button} type="submit">
              Generate Pixel Art
            </button>
            <button onClick={generateApiLoad} className={styles.buttonHidden}>
              GENERATE SOME API LOAD
            </button>
          </div>
        </form>
        <div>
          <p className={styles.description}>
            <strong>Results:</strong>
          </p>
          <div className={styles.results}>
            {loading ? (
              <div>Loading...</div>
            ) : (
              <div
                className={styles.artCanvas}
                style={{ gridTemplateColumns: `repeat(${renderedSize}, 1fr)` }}
              >
                {results.map((result) => (
                  <div
                    className={styles.pixel}
                    style={{
                      backgroundColor: getColor(result),
                      width: `calc(50vw / ${renderedSize})`,
                    }}
                    key={String(result)}
                  ></div>
                ))}
              </div>
            )}
          </div>
        </div>
      </main>
    </div>
  );
}
